<div class="modal-wrapper" id="add-user-modal">
     <div class="modal">
       <a href="#" onclick="closeModal()" class="modal-close">+</a>
       <div class="modal-title">
         <h2>Create New User</h2>
       </div>
       <div class="modal-body">
         <form method="post" action="/users" enctype="multipart/form-data" id="add-user-form"> 

           <input type="text" placeholder="enter name" name="name" />
           <p class="error name-error"> </p>
           <input type="text" placeholder="enter email" name="email" />
           <p class="error email-error"> </p>
           <input type="text" placeholder="enter mobile" name="mobile" />
           <p class="error mobile-error"> </p>
           <input
             type="password"
             placeholder="enter password"
             name="password"
           />
           <p class="error password-error"> </p>
           <input type="file" name="avatar" />
           <p class="error avatar-error"> </p>


           <p class="error common-error"> </p>

           <input type="submit" value="Submit" />
         </form>
       </div>
     </div>
   </div>
   <script>
     const modal = document.querySelector("#add-user-modal");
     const form = document.querySelector("#add-user-form");

     // Success Toast 
     const successToast = Toastify({
          text: "User was added successfully!",
          duration:1000,
     });

     function closeModal() {
       modal.style.display = "none";
     }
     function openModal() {
       modal.style.display = "block";
     }

     // Form submit handler 
     form.onsubmit = async function (event) {
          event.preventDefault();

     const errorPlaceholders = document.querySelectorAll("p.error");
     for(let i = 0; i < errorPlaceholders.length; i++ ){
          errorPlaceholders[i].style.display = "none";
     }
     const inputErrors = document.querySelectorAll("input.error");
     if(inputErrors.length > 0){
          for(let j = 0; j < inputErrors.length; j++) {
               inputErrors[j].classList.remove("error");
          }
     }


      // for the form data 
      const formData = new FormData(form);
      // send the request to server 
      let response = await fetch("/users" ,{
           method: "POST",
           body:formData,
      });

      // get resonse 
      let result = await response.json();
      if(result.errors){
           // Errors data 
           Object.keys(result.errors).forEach((fieldName) => {
                // add error clas to all input filed 
                form[fieldName].classList.add("error");
                const errorPlaceholder = document.querySelector(`.${fieldName}-error`);
                errorPlaceholder.textContent = result.errors[fieldName].msg;
                errorPlaceholder.style.display = "block";
           });
      } else {
           // sucess 
           successToast.showToast();
           closeModal();
           document.querySelector("p.error").style.display = "none";
           // reload this page after 1 sec
           setTimeout(() => {
                location.reload();
           }, 1000); 
      } 

     };// end onsubmit function







   </script>